Step 1: Check .ssh Directory
ls ~/.ssh
Result: Only known_hosts was present
🔸 This meant: No SSH key existed yet on your machine. So

Step 2: Generate SSH Key
ssh-keygen -t ed25519 -C "rupeshbca143@gmail.com"
-t ed25519: Generates a secure SSH key of type ED25519

-C "...": Adds a label/email to help identify the key

You pressed Enter to save at the default location: C:\Users\sacha\.ssh\id_ed25519

Then skipped passphrase (pressed Enter twice)
 Result:

Created:

Private key: id_ed25519

Public key: id_ed25519.pub

These are now stored in C:\Users\sacha\.ssh\

 Step 3: View Public Key
 cat ~/.ssh/id_ed25519.pub
This shows your public key in proper OpenSSH format:
ssh-ed25519 AAAAC3NzaC1... rupeshbca143@gmail.com
You then copied this and added it to GitHub under SSH Keys.

 Step 4: Push Code with SSH
 git push origin master

 Now that your Git is authenticated via SSH:

 No username/password or token was needed

 GitHub accepted the SSH key

 Your push was successful:

 To github.com:Rupesh145/SDETUpSkilling.git
    c9b0908..5c48aa4  master -> master

    ✅ Final Status
    You now have:

    🔐 An SSH keypair set up

    🔗 The public key added to GitHub

    ✅ Push access via SSH working without password prompts



     Extra Tip (Optional)
    If you’re ever unsure which key Git is using, run:


    ssh -T git@github.com
    If everything’s good, it will say:


    Hi Rupesh145! You've successfully authenticated...




    Where Did id_ed25519 Come From?
    It was created by you when you ran this command:

    bash
    Copy
    Edit
    ssh-keygen -t ed25519 -C "rupeshbca143@gmail.com"
    🔍 Here's What This Command Did:
    Part	Meaning
    ssh-keygen	A command-line tool to generate SSH key pairs
    -t ed25519	Says: use the ED25519 algorithm (fast and secure)
    -C "your-email"	Just a comment added to the key (helps identify it)
    (pressing Enter)	Saved the key to the default location: C:\Users\sacha\.ssh\id_ed25519

    📁 Result: It Created Two Files
    In this folder: C:\Users\sacha\.ssh\

    File Name	Purpose
    id_ed25519	Your private key (used by Git during push/pull)
    id_ed25519.pub	Your public key (you copied this to GitHub)

    📌 Why This Name?
    id_ stands for "identity"

    ed25519 is the algorithm used

    So id_ed25519 simply means:
    🔐 "Your identity, using ED25519 encryption."

    ✅ You Don't Have to Name It
    If you had typed a different file name when prompted during keygen, it could have been called anything (like rupesh_git_key).
    But because you pressed Enter without typing a name, the default id_ed25519 was used.

    Let me know if you’d like to generate a second SSH key for another GitHub account or repo — the steps are a little different in that case!








